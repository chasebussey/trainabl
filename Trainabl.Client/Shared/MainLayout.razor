@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MudBlazor.Utilities
@using Trainabl.Client.Pages
@using Trainabl.Shared.Models
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject SignOutSessionStateManager SignOutManager
@inject IConfiguration Configuration
@inject IDialogService DialogService
<MudThemeProvider Theme="CustomTheme" IsDarkMode="@_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="0" Variant="DrawerVariant.Mini" ClipMode="DrawerClipMode.Never">
        @if (_drawerOpen)
        {
            <MudImage Src="Images/TrainablType.png" Width="200" ObjectPosition="ObjectPosition.Left" Class="ml-5 my-4"/>
        }
        else
        {
            <MudImage Src="Images/TrainablLetter.png" Width="34" Class="my-4" Style="margin-left: 11px"/>
        }
        <MudNavMenu Bordered="true">
            <MudNavLink Href="TrainerDashboard" Icon="@Icons.Filled.Dashboard">Dashboard</MudNavLink>
            <MudNavLink Href="WorkoutLibrary" Icon="@Icons.Filled.LocalLibrary">Workout Library</MudNavLink>
            <MudNavLink Href="NewWorkout" Icon="@Icons.Filled.FitnessCenter">New Workout</MudNavLink>
        </MudNavMenu>
        <MudSpacer/>
        <MudNavMenu>
            <MudNavLink Icon="@Icons.Filled.Settings" OnClick="ShowSettingsDialog">Settings</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="pt-4">
        <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="mt-4 px-8">@Body</MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter]
    public UserSettings UserSettings { get; set; }

    MudTheme CustomTheme = new()
    {
        PaletteDark = new PaletteDark
        {
            Primary = Colors.LightGreen.Darken1,
            Secondary = new MudColor("#3a5c88ff"),
            DrawerText = new MudColor("#e3e3e3"),
            DrawerIcon = new MudColor("#e3e3e3")
        }
    };

    protected override Task OnInitializedAsync()
    {
        _drawerOpen = !UserSettings.PreferMiniDrawer;
        _isDarkMode = !UserSettings.PreferLightMode;
        return base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _drawerOpen = !UserSettings.PreferMiniDrawer;
        _isDarkMode = !UserSettings.PreferLightMode;
        base.OnAfterRender(firstRender);
    }

    bool _drawerOpen;
    bool _isDarkMode;

    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
    }
    
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("authentication/logout");
    }

    private void ShowSettingsDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<Settings>("Settings", options);
    }
}
