@page "/WorkoutLibrary"
@inject HttpClient HttpClient
@inject ILocalStorageService LocalStorageService
@attribute [Authorize(Roles = "Trainer")]
@using Trainabl.Shared.Models
@using Blazored.LocalStorage

<MudTable ServerData="@(new Func<TableState, Task<TableData<Workout>>>(ServerReload))" Hover="true" @ref="_table" Bordered="true">
    <ToolBarContent >
        <MudText Typo="Typo.h6">Workouts</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" Class="mr-2 mt-0"/>
        <MudButton StartIcon="@Icons.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" Class="mt-3">Add</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Workout">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="template_field" T="Workout">Template?</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="client_field" T="Workout">Client</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="IsTemplate">@context.IsTemplate</MudTd>
        <MudTd DataLabel="Client">
            @if (context.ClientProfile != null)
            {
                @context.ClientProfile.Name
            }
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudProgressCircular Indeterminate="true"/>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Workout> _pagedData;
    private MudTable<Workout> _table;
    private Guid _trainerId;

    private int _totalItems;
    private string _searchString = null;

    protected override async Task OnInitializedAsync()
    {
        var trainerProfile = await LocalStorageService.GetItemAsync<TrainerProfile>("trainerProfile");
        _trainerId = trainerProfile.Id;
        await base.OnInitializedAsync();
    }

    private async Task<TableData<Workout>> ServerReload(TableState state)
    {
        IEnumerable<Workout> data = await HttpClient.GetFromJsonAsync<List<Workout>>($"api/Trainers/{_trainerId}/workouts");

        data = data.Where(x => string.IsNullOrWhiteSpace(_searchString) 
                               || x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase) 
                               || (x.ClientProfile is not null && x.ClientProfile.Name.Contains(_searchString)));

        _totalItems = data.Count();

        data = state.SortLabel switch
        {
            "name_field"     => data.OrderByDirection(state.SortDirection, x => x.Name),
            "template_field" => data.OrderByDirection(state.SortDirection, x => x.IsTemplate),
            "client_field"   => data.OrderByDirection(state.SortDirection, x => x.ClientProfile?.Name ?? ""),
            _                => data
        };

        _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Workout>() { TotalItems = _totalItems, Items = _pagedData };
    }

    private void OnSearch(string str)
    {
        _searchString = str;
        _table.ReloadServerData();
    }
}