@using Trainabl.Shared.Models
@using Blazored.LocalStorage
@inject IDialogService DialogService
@inject HttpClient HttpClient

<div class="d-flex mud-width-max justify-end">
    <MudButton StartIcon="@Icons.Filled.Add" Color="Color.Primary" OnClick="() => ShowMetricForm(null)">Add Metric</MudButton>
</div>
    <MudList Clickable="true" Dense="true" Style="height: 40vh; overflow-y: auto">
        <MudListSubheader>Basic Metrics</MudListSubheader>
        @foreach (var metric in _metrics.Where(x => _basicMetricNames.Contains(x.Name)))
        {
            <MudListItem OnClick="() => ShowMetricForm(metric)">
                <div class="d-inline-flex align-center" style="width:100%">
                    <MudText> @metric.Name: @metric.Value.ToString("N2") @metric.Unit</MudText>
                    <MudSpacer/>
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Filled.PlaylistAdd" OnClick="() => ShowMetricForm(metric)"/>
                    <MudTooltip Text="Remove latest value" Arrow="true">
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Filled.Undo"/>
                    </MudTooltip>
                    <MudTooltip Text="Delete metric and ALL values" Arrow="true">
                        <MudIconButton Color="Color.Error" Icon="@Icons.Filled.Delete"/>
                    </MudTooltip>
                </div>
            </MudListItem>
        }
        <MudDivider/>
        <MudListSubheader>Custom Metrics</MudListSubheader>
        @foreach (var metric in _metrics.Where(x => !_basicMetricNames.Contains(x.Name)))
        {
            <MudListItem OnClick="() => ShowMetricForm(metric)">
                <div class="d-inline-flex align-center" style="width:100%">
                    <MudText> @metric.Name: @metric.Value.ToString("N2") @metric.Unit</MudText>
                    <MudSpacer/>
                    <MudIconButton Color="Color.Primary" Icon="@Icons.Filled.PlaylistAdd" OnClick="() => ShowMetricForm(metric)"/>
                    <MudTooltip Text="Remove latest value" Arrow="true">
                        <MudIconButton Color="Color.Secondary" Icon="@Icons.Filled.Undo"/>
                    </MudTooltip>
                    <MudTooltip Text="Delete metric and ALL values" Arrow="true">
                        <MudIconButton Color="Color.Error" Icon="@Icons.Filled.Delete"/>
                    </MudTooltip>
                </div>
            </MudListItem>
        }
    </MudList>

@code {
    [CascadingParameter] Guid ClientId { get; set; }

    private List<Metric> _metrics = new List<Metric>();

    private string[] _basicMetricNames = new[]
    {
        "Weight",
        "Height",
        "BMI"
    };

    protected override async Task OnParametersSetAsync()
    {
        await LoadMetrics();
        await base.OnParametersSetAsync();
    }

    private async Task LoadMetrics()
    {
        try
        {
            _metrics = await HttpClient.GetFromJsonAsync<List<Metric>>($"api/Clients/{ClientId}/latestmetrics");
        }
        catch (Exception e)
        {
        }
    }

    private async Task ShowMetricForm(Metric? metric)
    {
        var parameters = new DialogParameters { ["Metric"] = metric, ["IsNewMetric"] = (metric is null), ["ClientId"] = ClientId };
        var dialog = DialogService.Show<MetricForm>("Record a metric", parameters);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await LoadMetrics();
        }
    }
}